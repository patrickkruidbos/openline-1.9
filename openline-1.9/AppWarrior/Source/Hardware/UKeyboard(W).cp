#if WIN32/* (c)2003 Hotsprings Inc. Licensed under GPL - see LICENSE in HotlineSources diresctory *//*Modifier keys on mac and win:Mac			Win---			---Command		NoneOption		AltControl		ControlShift		Shift*/#include "UKeyboard.h"// table for converting portable keycodes to win keycodesstatic const Uint8 _gKCToWin[256] = {//      0     1     2     3     4     5     6     7     8     9     A     B     C     D     E     F/* 0 */	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,/* 1 */	0x60, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x90, 0x00, 0x6F, 0x6A, 0x6D, 0x6B,/* 2 */	0x0D, 0x6E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,/* 3 */	0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,/* 4 */	0x00, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F,/* 5 */	0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x00, 0x00, 0x00, 0x00, 0x00,/* 6 */	0xBD, 0xBB, 0xDB, 0xDD, 0xDC, 0xBA, 0xDE, 0xBC, 0xBE, 0xBF, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00,/* 7 */	0x09, 0x0D, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,/* 8 */	0x24, 0x23, 0x21, 0x22, 0x26, 0x28, 0x25, 0x27, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,/* 9 */	0x1B, 0x08, 0x2D, 0x2E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,/* A */	0x14, 0xA0, 0xA1, 0xA2, 0xA3, 0xA4, 0xA5, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,/* B */	0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7A, 0x7B, 0x7C, 0x7D, 0x7E, 0x7F,/* C */	0x80, 0x81, 0x82, 0x83, 0x84, 0x85, 0x86, 0x87, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,/* D */	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,/* E */	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,/* F */	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};// table for converting win keycodes to portable keycodesstatic const Uint8 _gKCFromWin[256] = {//      0     1     2     3     4     5     6     7     8     9     A     B     C     D     E     F/* 0 */	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x91, 0x70, 0x00, 0x00, 0x00, 0x71, 0x00, 0x00,/* 1 */	0xA1, 0xA3, 0xA5, 0x00, 0xA0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x90, 0x00, 0x00, 0x00, 0x00,/* 2 */	0x72, 0x82, 0x83, 0x81, 0x80, 0x86, 0x84, 0x87, 0x85, 0x00, 0x00, 0x00, 0x00, 0x92, 0x93, 0x00,/* 3 */	0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,/* 4 */	0x00, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F,/* 5 */	0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x00, 0x00, 0x00, 0x00, 0x00,/* 6 */	0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1D, 0x1F, 0x00, 0x1E, 0x21, 0x1C,/* 7 */	0xB0, 0xB1, 0xB2, 0xB3, 0xB4, 0xB5, 0xB6, 0xB7, 0xB8, 0xB9, 0xBA, 0xBB, 0xBC, 0xBD, 0xBE, 0xBF,/* 8 */	0xC0, 0xC1, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 0xC7, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,/* 9 */	0x1A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,/* A */	0xA1, 0xA2, 0xA3, 0xA4, 0xA5, 0xA6, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,/* B */	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,/* C */	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,/* D */	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,/* E */	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,/* F */	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};/* -------------------------------------------------------------------------- */bool UKeyboard::IsKeyDown(Uint16 inKeyCode){	if (inKeyCode > max_Uint8) return false;	return ::GetAsyncKeyState(_gKCToWin[inKeyCode]) != 0;}bool UKeyboard::IsCommandKeyDown(){	// no command key on win keyboards	return false;}// returns true if either option/alt key is currently downbool UKeyboard::IsOptionKeyDown(){	// VK_MENU is alt key	return ::GetAsyncKeyState(VK_MENU) != 0;}// returns true if either shift key is currently downbool UKeyboard::IsShiftKeyDown(){	return ::GetAsyncKeyState(VK_SHIFT) != 0;}// returns true if either control key is currently downbool UKeyboard::IsControlKeyDown(){	return ::GetAsyncKeyState(VK_CONTROL) != 0;}// bits are set if either key is downUint16 UKeyboard::GetModifiers(){	Uint16 mods = 0;		if (::GetAsyncKeyState(VK_CONTROL))	mods |= modKey_Control;	if (::GetAsyncKeyState(VK_MENU))	mods |= modKey_Alt;	if (::GetAsyncKeyState(VK_CAPITAL))	mods |= modKey_CapsLock;	if (::GetAsyncKeyState(VK_SHIFT))	mods |= modKey_Shift;	return mods;}bool UKeyboard::IsFunctionKey(Uint16 inKeyCode){	return (inKeyCode >= key_F1 && inKeyCode <= key_F24);}bool UKeyboard::IsModifierKey(Uint16 inKeyCode){	return (inKeyCode >= key_CapsLock && inKeyCode <= key_RightCommand);}Uint16 UKeyboard::KeyToChar(Uint16 inKeyCode, Uint16 /*inMods*/, Uint32 /*inEncoding*/){	if (inKeyCode > max_Uint8) return 0;	return tolower(::MapVirtualKey(_gKCToWin[inKeyCode], 2));}Uint16 _WinKeyCodeToStd(Uint16 inWinKC){	return (inWinKC > 0xFF) ? 0 : _gKCFromWin[inWinKC];}#endif /* WIN32 */