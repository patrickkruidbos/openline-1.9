#if MACINTOSH/* (c)2003 Hotsprings Inc. Licensed under GPL - see LICENSE in HotlineSources diresctory */#include "UKeyboard.h"#include <Script.h>#include <LowMem.h>// table for converting portable keycodes to mac keycodesstatic const Uint8 _gKCToMac[256] = {//      0     1     2     3     4     5     6     7     8     9     A     B     C     D     E     F/* 0 */	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,/* 1 */	0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5B, 0x5C, 0x47, 0x51, 0x4B, 0x43, 0x4E, 0x45,/* 2 */	0x4C, 0x41, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,/* 3 */	0x1D, 0x12, 0x13, 0x14, 0x15, 0x17, 0x16, 0x1A, 0x1C, 0x19, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,/* 4 */	0xFF, 0x00, 0x0B, 0x08, 0x02, 0x0E, 0x03, 0x05, 0x04, 0x22, 0x26, 0x28, 0x25, 0x2E, 0x2D, 0x1F,/* 5 */	0x23, 0x0C, 0x0F, 0x01, 0x11, 0x20, 0x09, 0x0D, 0x07, 0x10, 0x06, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,/* 6 */	0x1B, 0x18, 0x21, 0x1E, 0x2A, 0x29, 0x27, 0x2B, 0x2F, 0x2C, 0x32, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,/* 7 */	0x30, 0x24, 0x31, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,/* 8 */	0x73, 0x77, 0x74, 0x79, 0x7E, 0x7D, 0x7B, 0x7C, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,/* 9 */	0x35, 0x33, 0x72, 0x75, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,/* A */	0x39, 0x38, 0x3C, 0x3B, 0x3E, 0x3A, 0x3D, 0x37, 0x37, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,/* B */	0x7A, 0x78, 0x63, 0x76, 0x60, 0x61, 0x62, 0x64, 0x65, 0x6D, 0x67, 0x6F, 0x69, 0x6B, 0x71, 0xFF,/* C */	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,/* D */	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,/* E */	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,/* F */	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF};// table for converting mac keycodes to portable keycodesstatic const Uint8 _gKCFromMac[128] = {//      0     1     2     3     4     5     6     7     8     9     A     B     C     D     E     F/* 0 */	0x41, 0x53, 0x44, 0x46, 0x48, 0x47, 0x5A, 0x58, 0x43, 0x56, 0x00, 0x42, 0x51, 0x57, 0x45, 0x52,/* 1 */	0x59, 0x54, 0x31, 0x32, 0x33, 0x34, 0x36, 0x35, 0x61, 0x39, 0x37, 0x60, 0x38, 0x30, 0x63, 0x4F,/* 2 */	0x55, 0x62, 0x49, 0x50, 0x71, 0x4C, 0x4A, 0x66, 0x4B, 0x65, 0x64, 0x67, 0x69, 0x4E, 0x4D, 0x68,/* 3 */	0x70, 0x72, 0x6A, 0x91, 0x20, 0x90, 0x00, 0xA7, 0xA1, 0x00, 0xA5, 0xA3, 0xA2, 0xA6, 0xA4, 0x00,/* 4 */	0x00, 0x21, 0x00, 0x1D, 0x00, 0x1F, 0x00, 0x1A, 0x00, 0x00, 0x00, 0x1C, 0x20, 0x00, 0x1E, 0x00,/* 5 */	0x00, 0x1B, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x00, 0x18, 0x19, 0x00, 0x00, 0x00,/* 6 */	0xB4, 0xB5, 0xB6, 0xB2, 0xB7, 0xB8, 0x00, 0xBA, 0x00, 0xBC, 0x00, 0xBD, 0x00, 0xB9, 0x00, 0xBB,/* 7 */	0x00, 0xBE, 0x92, 0x80, 0x82, 0x93, 0xB3, 0x81, 0xB1, 0x83, 0xB0, 0x86, 0x87, 0x85, 0x84, 0x00};/* -------------------------------------------------------------------------- */bool UKeyboard::IsKeyDown(Uint16 inKeyCode){	if (inKeyCode > max_Uint8) 		return false;		Uint8 k = _gKCToMac[inKeyCode];	Uint8 km[32] = { 0 };	#if TARGET_API_MAC_CARBON	::GetKeys((Int32 *)km);#else	::GetKeys((Uint32 *)km);#endif	return ( ( km[k >> 3] >> (k & 7) ) & 1);}/* * Regarding the functions below that check the status of modifier * keys, there are two shift keys, and often two of each modifier * key.  These functions return true if either key (or both) is * held down.  Although the mac gives us separate key codes for * the left key and the right key, GetKeys() never sets the bit * for the right key, and always sets the left bit if either key * is down. */// returns true if either command key is currently downbool UKeyboard::IsCommandKeyDown(){	KeyMap km;	GetKeys(km);	return (km[1] & 0x00008000) != 0;}// returns true if either option/alt key is currently downbool UKeyboard::IsOptionKeyDown(){	KeyMap km;	GetKeys(km);	return (km[1] & 0x00000004) != 0;}// returns true if either shift key is currently downbool UKeyboard::IsShiftKeyDown(){	KeyMap km;	GetKeys(km);	return (km[1] & 0x00000001) != 0;}// returns true if either control key is currently downbool UKeyboard::IsControlKeyDown(){	KeyMap km;	GetKeys(km);	return (km[1] & 0x00000008) != 0;}// bits are set if either key is downUint16 UKeyboard::GetModifiers(){	EventRecord macEvent;#if TARGET_API_MAC_CARBON	::EventAvail(0, &macEvent);#else	::OSEventAvail(0, &macEvent);#endif		Uint16 m = 0;		if (macEvent.modifiers & 0x1000)	m |= modKey_Control;	if (macEvent.modifiers & 0x0800)	m |= modKey_Option;	if (macEvent.modifiers & 0x0400)	m |= modKey_CapsLock;	if (macEvent.modifiers & 0x0200)	m |= modKey_Shift;	if (macEvent.modifiers & 0x0100)	m |= modKey_Command;		return m;}Uint16 UKeyboard::KeyToChar(Uint16 inKeyCode, Uint16 inMods, Uint32 /* inEncoding */){	if (inKeyCode > max_Uint8) return 0;	Uint16 kc = _gKCToMac[inKeyCode];		if (inMods & modKey_Control)	kc |= 0x1000;	if (inMods & modKey_Option)		kc |= 0x0800;	if (inMods & modKey_CapsLock)	kc |= 0x0400;	if (inMods & modKey_Shift)		kc |= 0x0200;	if (inMods & modKey_Command)	kc |= 0x0100;	Ptr KCHR = (Ptr)::GetScriptManagerVariable(smKCHRCache);		Uint32 state = 0;	Uint32 keyInfo = ::KeyTranslate(KCHR, kc, &state);		return keyInfo & 0x000000FF;}bool UKeyboard::IsFunctionKey(Uint16 inKeyCode){	return (inKeyCode >= key_F1 && inKeyCode <= key_F24);}bool UKeyboard::IsModifierKey(Uint16 inKeyCode){	return (inKeyCode >= key_CapsLock && inKeyCode <= key_RightCommand);}#if 0	// not used anymoreconst Uint8 *UKeyboard::GetNavigateString(){	static Uint8 keyNavigateString[32];	// calculate threshold	Int16 thresh = LMGetKeyThresh() * 2;	if (thresh > 120) thresh = 120;		// reset string if the key didn't make it within the threshold	if (gUtilData.lastKeyTicks - gUtilData.prevKeyTicks > thresh || keyNavigateString[0] > 30)		keyNavigateString[0] = 0;		// append the key to the string	keyNavigateString[0]++;	keyNavigateString[keyNavigateString[0]] = gUtilData.lastKeyChar;		// return the string	return keyNavigateString;}#endifUint16 _MacKeyCodeToStd(Uint16 inMacKC){	return (inMacKC > 0x7F) ? 0 : _gKCFromMac[inMacKC];}#endif