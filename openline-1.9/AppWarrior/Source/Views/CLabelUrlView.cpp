/* (c)2003 Hotsprings Inc. Licensed under GPL - see LICENSE in HotlineSources diresctory */#include "CLabelUrlView.h"CLabelUrlView::CLabelUrlView(CViewHandler *inHandler, const SRect& inBounds)	: CView(inHandler, inBounds), mColor(0), mHiliteColor(0xFFFF, 0, 0), mDisableColor(0xDFFF){	mURL=nil;	mFont= UFontDesc::New(kDefaultFont, nil, 12);		mLaunched = false;}CLabelUrlView::CLabelUrlView(CViewHandler *inHandler, const SRect& inBounds, const Uint8 *inURL)	: CView(inHandler, inBounds), mColor(0), mHiliteColor(0xFFFF, 0, 0), mDisableColor(0xDFFF){	mURL=nil;	mFont= UFontDesc::New(kDefaultFont, nil, 12);	mLaunched = false;	SetURL(inURL);}					  CLabelUrlView::~CLabelUrlView(){	if (mURL != nil)		UMemory::Dispose(mURL);			UFontDesc::Dispose(mFont);}/* -------------------------------------------------------------------------- */#pragma mark -		void CLabelUrlView::MouseDown(const SMouseMsgData& inInfo){	CView::MouseDown(inInfo);	if (inInfo.button == mouseButton_Left)		Refresh();}void CLabelUrlView::MouseUp(const SMouseMsgData& inInfo){	CView::MouseUp(inInfo);		if (inInfo.button == mouseButton_Left)	{		Refresh();		if (mIsMouseWithin)			LaunchURL();	}}void CLabelUrlView::MouseEnter(const SMouseMsgData& inInfo){	CView::MouseEnter(inInfo);	if (mLaunched)		mLaunched = false;	Refresh();	SetMouseLaunch();}void CLabelUrlView::MouseMove(const SMouseMsgData& inInfo){	CView::MouseMove(inInfo);	if (mLaunched)		mLaunched = false;	SetMouseLaunch();}void CLabelUrlView::MouseLeave(const SMouseMsgData& inInfo){	CView::MouseLeave(inInfo);	Refresh();	SetMouseStandard();}/* -------------------------------------------------------------------------- */#pragma mark -bool CLabelUrlView::ChangeState(Uint16 inState){	if (inState == viewState_Hidden || inState == viewState_Inactive)		SetMouseStandard();		return CView::ChangeState(inState);}/* -------------------------------------------------------------------------- */#pragma mark -void CLabelUrlView::Draw(TImage inImage, const SRect& /* inUpdateRect */, Uint32 /* inDepth */){	if (mURL == nil)		return;		if (!mIsEnabled)		mFont->SetColor(mDisableColor);	else if (mIsLeftMouseBtnDown && !mLaunched)		mFont->SetColor(mHiliteColor);	else		mFont->SetColor(mColor);	inImage->SetFont(mFont);		SRect stBounds = mBounds;	if (mIsEnabled)	{		stBounds.top -= 1;		if (mIsMouseWithin && !mLaunched)		{			stBounds.top += 2;			stBounds.left += 2;		}	}		Uint32 sizeURL= UMemory::GetSize(mURL);	Uint8 *pURL	= UMemory::Lock(mURL);	inImage->DrawText(stBounds, pURL, sizeURL, 0, align_Left + align_CenterVert);	UMemory::Unlock(mURL);	}/* -------------------------------------------------------------------------- */#pragma mark -void CLabelUrlView::SetURL(const void *inURL, Uint32 inSize){	if (inURL != nil && inSize != 0)	{		if (mURL == nil)			mURL = UMemory::NewHandle(inSize);		else if (mURL->GetSize() != inSize)			mURL->Reallocate(inSize);				mURL->Set(inURL, inSize);	}}void CLabelUrlView::SetURL(const Uint8* inURL){	if (inURL != nil && inURL[0] != 0)	{		if (mURL == nil)			mURL = UMemory::NewHandle(inURL[0]);		else if (mURL->GetSize() != inURL[0])			mURL->Reallocate(inURL[0]);				mURL->Set(inURL+1, inURL[0]);	}}Uint32 CLabelUrlView::GetURL(void *outURL, Uint32 inMaxSize) {		if (mURL == nil || outURL == nil)		return 0;		return UMemory::Read(mURL, 0, outURL, inMaxSize);	}Uint32 CLabelUrlView::GetURLSize(){		return mURL ? UMemory::GetSize(mURL) : 0;			}/* -------------------------------------------------------------------------- */#pragma mark -bool CLabelUrlView::LaunchURL(){	if (mURL == nil)		return false;		Uint32 nSize = UMemory::GetSize(mURL);	Uint8 *pURL	= UMemory::Lock(mURL);	mLaunched = UTransport::LaunchURL(pURL, nSize);	UMemory::Unlock(mURL);	if (mLaunched)		Refresh();		return mLaunched;}/* -------------------------------------------------------------------------- */#pragma mark -void CLabelUrlView::SetFont(TFontDesc inFont, SColor& inHiliteColor){	if (inFont==nil)		return;		UFontDesc::Dispose(mFont);	mFont = inFont;		mFont->GetColor(mColor);	mHiliteColor = inHiliteColor;}void CLabelUrlView::SetFont(const Uint8 *inName, const Uint8 *inStyle, Uint32 inSize, Uint32 inEffect){	mFont->SetFontName(inName, inStyle);	mFont->SetFontSize(inSize);		if (inEffect)		mFont->SetFontEffect(inEffect);}void CLabelUrlView::SetFontSize(Uint32 inSize){	mFont->SetFontSize(inSize);}/* -------------------------------------------------------------------------- */#pragma mark -void CLabelUrlView::SetColor(SColor& inColor){	mColor = inColor;}void CLabelUrlView::SetHiliteColor(SColor& inHiliteColor){	mHiliteColor = inHiliteColor;}void CLabelUrlView::SetDisableColor(SColor& inDisableColor){	mDisableColor = inDisableColor;}/* -------------------------------------------------------------------------- */#pragma mark -void CLabelUrlView::SetMouseLaunch(){	if (mURL != nil && UMouse::GetImage() != mouseImage_HandPoint)		UMouse::SetImage(mouseImage_HandPoint);}void CLabelUrlView::SetMouseStandard(){	if (mURL != nil && UMouse::GetImage() != mouseImage_Standard)		UMouse::SetImage(mouseImage_Standard);}